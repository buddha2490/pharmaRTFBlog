---
title: "Building CDISC TFLs in R with {pharmaRTF} and {huxtable}: a practical Table 1"
author: "Brian Carter"
date: "2025-08-12"
format:
  docx:
    toc: true
execute:
  echo: true
  warning: false
  message: false
editor: visual
---

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
# Packages
library(dplyr)
library(tidyr)
library(glue)
library(readxl)
library(huxtable)
library(pharmaRTF)

# Knitr / huxtable defaults for clean output in the blog
options(huxtable.knit_print_df = FALSE)
```

## Introduction

Tables, Figures, and Listings (TFLs) are the backbone of CDISC statistical reporting. In many organizations, SAS has been the primary tool, with teams leaning heavily on `PROC REPORT` and `PROC TEMPLATE`. The initial learning curve and the tendency to “lock into” one table design can make moving to R feel daunting. The goal of this post is to show a simple, reproducible path in R that you can *copy-paste and extend*: we’ll build a classic **Table 1** (baseline demographics) from an ARD (Analysis Results Data) style dataset using **`huxtable`** for table styling and **`pharmaRTF`** for regulator-friendly RTF output.

We’ll keep the pattern minimal and reusable: shape the ARD to a wide format, print a readable table for HTML/PDF, then export the same table to RTF with proper titles, footnotes, and pagination. The data used for this post are [available online for download.](https://github.com/buddha2490/pharmaRTFBlog.git)

> What you’ll learn
>
> -   How ARD-shaped results roll up into TFLs\
> -   A “starter” Table 1 you can replicate across studies\
> -   Practical `huxtable` tricks: multi-row headers, cell merges, alignment, and borders\
> -   How `pharmaRTF` adds titles, footnotes, and document properties for submission-ready RTF

## Data: the ARD idea

ARD (Analysis Results Data) standardizes computed statistics (counts, percentages, means, SDs, etc.) into a tidy structure, so TFLs can be automated from a consistent input. Many teams now generate ARDs directly in R; a popular option in the pharmaverse is the `cards` package, which provides constructors and utilities for ARD objects (and extensions in `cardx` for more analyses). We’ll start from a prepared ARD-like file, `data.xlsx`, and restructure it into a Table 1 input using following code.

```{r}
df <- readxl::read_excel("data.xlsx")

table1 <- df %>%
  filter(program == "program1.R") %>%
  filter(variable_context == "char") %>%
  select(-stat_label) %>%
  pivot_wider(
    names_from = stat_name,
    values_from = stat
  ) %>%
  mutate(stat = as.character(glue::glue("{p} ({n})"))) %>%
  group_by(variable_label, group_level) %>%
  mutate(variable_label = ifelse(row_number() != 1, "", variable_label)) %>%
  ungroup() %>%
  mutate(stat_label = "N (%)") %>%
  bind_rows(
    df %>%
      filter(program == "program1.R") %>%
      filter(variable_context == "num") %>%
      select(-stat_name)  %>%
      group_by(variable_label, group_level) %>%
      mutate(variable_label = ifelse(row_number() != 1, "", variable_label)) %>%
      ungroup() %>%
      group_by(variable_level, group_level) %>%
      mutate(variable_level = ifelse(row_number() != 1, "", variable_level)) %>%
  ungroup()
  ) %>%
  select(group_level, variable_label, variable_level, stat_label, stat) %>%
  mutate(group_level = factor(group_level, levels = c("All Patients", "Placebo", "Treatment")))
```

## Building your first `huxtable`

The `huxtable` package creates customizable, publication-quality tables in R with intuitive functions for styling, alignment, cell merging, and formatting. Paired with `pharmaRTF`, it enables seamless formatting of TFLs for regulatory submission, bridging statistical output and polished RTF tables, making R a viable SAS PROC REPORT alternative.

This minimal version is already sufficient for many tables: feed it a similarly shaped ARD and you’ll get consistent output. Next, let’s layer in the styling tricks you often need in clinical reporting.

```{r}
#| label: minimal-table

ht <- table1 %>%
  pivot_wider(
    names_from = group_level,
    values_from = stat,
    id_cols = c(variable_level, variable_label, stat_label),
    values_fill = "",
    values_fn = list(stat = dplyr::first))  %>%
    select(Variable = variable_label, 
           Level = variable_level, 
           Statistic = stat_label, everything())



# Basic alignment: descriptions left, stats centered/right as you prefer
n_cols      <- ncol(ht) # total number of columns in the table
group_cols  <- setdiff(seq_len(n_cols), 1:3) # isolate the groups


ht %>%
  huxtable::as_hux() %>%
  huxtable::set_bold(1, everywhere, TRUE) %>%
  huxtable::set_align(, n_cols, "left") %>%
  huxtable::set_align(, group_cols, "center") %>%
  huxtable::set_width(1) 



```

## Headers, merges, font sizes, justification & styling

The minimal example is nice enough, but ideally we would want to format the table to look a little more professional. Some of these steps are accomplished through the `huxtable` package and other wait until rendering with `pharmaRTF`.

Let's start by adding a header row over the treatment groups. We will do this by creating a new `huxtable` of the header and then adding it to the main table. When we compile the final table with `pharmaRTF` this header row will be carried over for each page.

```{r}
# Create a header huxtable
head_ht <- c(rep("", 3), rep("Treatment Arm", 3))

last_row <- nrow(ht) + 2

ht <- ht %>%
  huxtable::hux() %>%
  insert_row(head_ht, after = 0, fill = "") %>%
  huxtable::merge_cells(row = 1, col = group_cols) 

ht

```

Now we can add some styling to the table. `huxtable` provides a standardized syntax for styling tables: `set_feature(ht, row, col, value)` where `row` and `col` can be single values or ranges, and `value` is the desired style (e.g., bold, font size, alignment). Using this syntax, we can add some horizontal style lines to our table, change the fonts, and set the alignment of the values.

```{r}

# Alignment
ht <- ht %>%
  huxtable::set_top_padding(0.2) %>%
  huxtable::set_bottom_padding(0.2) %>%
  huxtable::set_align(row = 1, col = group_cols, "center") %>%
  huxtable::set_align(row = everywhere, col = 1:3, "left") %>%
  huxtable::set_align(row = everywhere, col = group_cols, "center")

# Fonts
ht <- ht %>%
  huxtable::set_font_size(row = everywhere, col = everywhere, 10) %>% 
  huxtable::set_font_size(row = 1:2, col = everywhere, 12) %>% 
  huxtable::set_bold(row = 1:2, col = everywhere, TRUE) %>%
  huxtable::set_font("arial")


# horizontal styling lines
ht <- ht %>%
  huxtable::set_top_border(row = 1, col = everywhere, 1) %>%
  huxtable::set_bottom_border(row = 1, col = group_cols, 1) %>%
  huxtable::set_bottom_border(row = 2, col = group_cols, 1) %>%
  huxtable::set_bottom_border(row = last_row, col = everywhere, 1) 


ht
```

## Final export to RTF (with `pharmaRTF`)

For clinical submissions, titles and footnotes belong in the RTF header/footer areas, paginate correctly, and repeat appropriately—this is where `pharmaRTF` shines. It consumes your `huxtable` and attaches header/footer lines, page size, orientation, and more.

```{r}
title1 = "Table 1. Baseline demographics and characteristics"
title2 = "Sample population"
footnote1 = "Brought to you by ProCogia and the Pharmaverse"

ht %>%
  set_width(1.5) %>%
  pharmaRTF::rtf_doc(header_rows = 1) %>%
  add_titles(hf_line(title1, "PAGE_FORMAT: Page %s of %s",
                     bold = TRUE, align = "split",
                     font = "arial", font_size = 12)) %>%
  add_titles(hf_line(title2, "DATE_FORMAT: %H:%M %A, %B %d, %Y",
                     bold = TRUE, align = "split",
                     font = "arial", font_size = 11)) %>%
  add_footnotes(hf_line(footnote1, align = "left",
                        font = "arial", font_size = 10)) %>%
  pharmaRTF::write_rtf("table1.rtf")


```

![](table1.png)

##  Conclusion

## Conclusion

What we built here is more than a single table—it’s a repeatable blueprint. Starting from ARD-shaped results, we reshaped data with familiar tidy verbs, used `huxtable` to express clean, readable structure, and relied on `pharmaRTF` to deliver regulator-friendly output. The same pattern scales from a baseline Table 1 to an entire TFL catalog with consistent headers, titles, footnotes, and pagination—without locking your team into a single rigid template.

The exciting part is what comes next. The **pharmaverse** is moving fast: standardized data contracts (like ARD), composable table builders, and interoperable tooling make it easy to automate the tedious parts and focus on the science. Open-source analytics gives you transparency, version control, and CI-friendly validation—so tables are not just beautiful; they’re reproducible, reviewable, and auditable. As your organization leans into this ecosystem, you’re not just replicating what you did in SAS—you’re unlocking a modern workflow that evolves with your needs.

If you’re considering the transition, start small: pilot a few priority TFLs, formalize your ARD outputs, and harden a minimal set of table styles. From there, expand coverage, add study-level metadata, and fold the pipeline into your quality system. Our team of statistical programmers at **ProCogia** has helped organizations follow exactly this path—from assessment and planning, to template design and validation, to training and rollout. We’d be happy to partner with you to make your move to open-source tools smooth, sustainable, and fast.

